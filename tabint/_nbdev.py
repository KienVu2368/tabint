# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"na_rm": "00_utils.ipynb",
         "unique_list": "00_utils.ipynb",
         "to_iter": "00_utils.ipynb",
         "sort_asc": "00_utils.ipynb",
         "sort_desc": "00_utils.ipynb",
         "flat_list": "00_utils.ipynb",
         "feature_value_to_df": "00_utils.ipynb",
         "df_append": "00_utils.ipynb",
         "df_from_array": "00_utils.ipynb",
         "numpy_sample": "00_utils.ipynb",
         "ResultDF": "00_utils.ipynb",
         "save_pickle": "00_utils.ipynb",
         "load_pickle": "00_utils.ipynb",
         "list_to_np_array": "00_utils.ipynb",
         "tabular_proc": "01_pre-processing.ipynb",
         "TBPreProc": "01_pre-processing.ipynb",
         "skip_flds": "01_pre-processing.ipynb",
         "remove_outlier": "03_transform.ipynb",
         "filter_outlier": "01_pre-processing.ipynb",
         "boxnwhisker_value": "03_transform.ipynb",
         "subset": "03_transform.ipynb",
         "fill_na": "03_transform.ipynb",
         "fix_missing": "01_pre-processing.ipynb",
         "app_cat": "03_transform.ipynb",
         "dummies": "03_transform.ipynb",
         "scale_vars": "03_transform.ipynb",
         "TBStep": "03_transform.ipynb",
         "noop_step": "03_transform.ipynb",
         "TBTransform": "03_transform.ipynb",
         "drop_features": "03_transform.ipynb",
         "select": "03_transform.ipynb",
         "apply_function": "03_transform.ipynb",
         "noop_transform": "03_transform.ipynb",
         "TBDataset": "04_dataset.ipynb",
         "random_choose": "04_dataset.ipynb",
         "stratify_split": "04_dataset.ipynb",
         "split_time_series": "04_dataset.ipynb",
         "split_by_cats": "04_dataset.ipynb",
         "crosstab_background_gradient": "05_eda.ipynb",
         "crosstab": "05_eda.ipynb",
         "cm_green": "05_eda.ipynb",
         "Dendogram": "06_feature.ipynb",
         "Importance": "06_feature.ipynb",
         "aggreate": "06_feature.ipynb",
         "BaseLeaner": "08_learner.ipynb",
         "SKLearner": "08_learner.ipynb",
         "LGBLearner": "08_learner.ipynb",
         "XGBLearner": "08_learner.ipynb",
         "Permutation_test": "09_stat.ipynb",
         "change_xaxis_pos": "10_visual.ipynb",
         "BaseViz": "10_visual.ipynb",
         "Missing": "10_visual.ipynb",
         "Correlation": "10_visual.ipynb",
         "plot_barh_from_df": "10_visual.ipynb",
         "plot_barh_from_series": "10_visual.ipynb",
         "Histogram": "10_visual.ipynb",
         "cal_histogram": "10_visual.ipynb",
         "plot_hist": "10_visual.ipynb",
         "BoxnWhisker": "10_visual.ipynb",
         "plot_boxnwhisker": "10_visual.ipynb",
         "KernelDensityEstimation": "10_visual.ipynb",
         "plot_kde": "10_visual.ipynb",
         "plot_roc_curve": "10_visual.ipynb",
         "plot_line": "10_visual.ipynb",
         "plot_bisectrix": "10_visual.ipynb",
         "plot_waterfall": "10_visual.ipynb",
         "plot_SKTree": "10_visual.ipynb",
         "plot_LGBTree": "10_visual.ipynb",
         "plot_scatter": "10_visual.ipynb",
         "plot_legend": "10_visual.ipynb",
         "TBPerformace": "11_performance.ipynb",
         "actual_vs_predict": "11_performance.ipynb",
         "ReceiverOperatingCharacteristic": "11_performance.ipynb",
         "PrecisionRecall": "11_performance.ipynb",
         "PartialDependence": "12_interpretation.ipynb",
         "green_blue": "12_interpretation.ipynb",
         "cl.red_blue": "12_interpretation.ipynb",
         "cl.red_blue_solid": "12_interpretation.ipynb",
         "Shapley": "12_interpretation.ipynb",
         "Shapley_approx": "12_interpretation.ipynb",
         "Traterfall": "12_interpretation.ipynb",
         "DrawTree": "12_interpretation.ipynb"}

modules = ["utils.py",
           "pre_processing.py",
           "transform.py",
           "dataset.py",
           "eda.py",
           "feature.py",
           "inference.py",
           "learner.py",
           "stat.py",
           "visual.py",
           "performance.py",
           "interpretation.py"]

doc_url = "https://KienVu2368.github.io/tabint/"

git_url = "https://github.com/KienVu2368/tabint/tree/master/"

def custom_doc_links(name): return None
